// frontend/src/pages/SOPViewer.jsx
import React, { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { ArrowLeft, Pencil, Printer } from "lucide-react";
import api from "../api/client";

export default function SOPViewer() {
  const { id } = useParams();
  const navigate = useNavigate();

  const [sop, setSop] = useState(null);
  const [loading, setLoading] = useState(true);
  const [zoomImage, setZoomImage] = useState(null);

  useEffect(() => {
    loadSOP();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [id]);

  async function loadSOP() {
    try {
      const res = await api.get(`/api/sops/${id}`);
      setSop(res);
    } catch (err) {
      console.error("Failed to load SOP:", err);
    } finally {
      setLoading(false);
    }
  }

  function handleEdit() {
    navigate(`/sop/create?id=${id}`, { state: { sop } });
  }

  function handlePrint() {
    if (!sop) return;
    const steps = Array.isArray(sop.steps) ? sop.steps : [];

    const html = `
      <html>
        <head>
          <meta charset="utf-8" />
          <title>${sop.title || "Manual"}</title>
          <style>
            @page { size: A4 landscape; margin: 10mm 15mm; }
            * { box-sizing: border-box; }
            body {
              font-family: "Segoe UI", Arial, sans-serif;
              margin: 0; padding: 0; color: #222;
            }
            h1 { text-align: center; color: #0B5150; font-size: 24px; margin: 0 0 8px 0; }
            .meta { text-align: center; font-size: 12px; color: #555; margin-bottom: 10px; }
            .desc { border-top: 1px solid #ccc; border-bottom: 1px solid #ccc; margin: 12px 0 20px; padding: 8px 0; text-align: justify; font-size: 14px; color: #333; }
            .step { page-break-inside: avoid; text-align: center; margin-bottom: 10mm; }
            .step + .step { page-break-before: always; }
            .step h3 { color: #0B5150; font-size: 20px; margin: 0 0 10px 0; }
            .step p { width: 85%; margin: 0 auto 14px; font-size: 15px; line-height: 1.5; }
            .step img { max-width: 90%; max-height: 70vh; display: block; margin: 0 auto; object-fit: contain; }
            .footnote { font-size: 10px; color: #777; margin-top: 8px; text-align: center; }
          </style>
        </head>
        <body>
          <h1>${sop.title || "Manual"}</h1>
          <div class="meta"><strong>Category:</strong> ${sop.category || "Manual"}</div>
          ${sop.description ? `<div class="desc">${sop.description}</div>` : ""}
          ${steps.map((s, i) => `
            <section class="step">
              <h3>Step ${i + 1}</h3>
              ${s?.text ? `<p>${s.text}</p>` : ""}
              ${s?.image_url ? `<img src="${s.image_url}" alt="Step ${i + 1}" />` : ""}
              <div class="footnote">Generated by Engineering App • ${new Date().toLocaleDateString()}</div>
            </section>
          `).join("")}
        </body>
      </html>
    `;

    const w = window.open("", "_blank");
    if (!w) return alert("Popup blocked. Please allow popups to print.");
    w.document.open();
    w.document.write(html);
    w.document.close();
    w.focus();
    w.print();
  }

  if (loading)
    return (
      <div className="p-6 text-center text-slate-500 dark:text-slate-400">
        Loading SOP...
      </div>
    );

  if (!sop)
    return <div className="p-6 text-center text-rose-500">SOP not found.</div>;

  const steps = Array.isArray(sop.steps) ? sop.steps : [];

  return (
    <div className="p-4 sm:p-6 lg:p-10 min-h-screen text-[var(--text-1)]">
      {/* Header */}
      <div className="flex flex-wrap items-center justify-between gap-2 sm:gap-3 mb-6">
        <button
          onClick={() => navigate("/manuals")}
          className="flex items-center gap-2 rounded-2xl border px-3 py-1.5 text-sm sm:text-base
                     border-zinc-300 bg-white text-zinc-800 hover:bg-zinc-100
                     dark:border-zinc-700 dark:bg-zinc-900 dark:text-zinc-200 dark:hover:bg-zinc-800"
        >
          <ArrowLeft className="w-4 h-4" />
          Back
        </button>

        <div className="flex flex-wrap gap-2">
          <button
            onClick={handleEdit}
            className="flex items-center gap-2 rounded-2xl border px-3 py-1.5 text-sm sm:text-base
                       border-zinc-300 bg-white text-zinc-800 hover:bg-zinc-100
                       dark:border-zinc-700 dark:bg-zinc-900 dark:text-zinc-200 dark:hover:bg-zinc-800"
          >
            <Pencil className="w-4 h-4" />
            Edit
          </button>
          <button
            onClick={handlePrint}
            className="flex items-center gap-2 rounded-2xl border px-3 py-1.5 text-sm sm:text-base
                       border-zinc-300 bg-white text-zinc-800 hover:bg-zinc-100
                       dark:border-zinc-700 dark:bg-zinc-900 dark:text-zinc-200 dark:hover:bg-zinc-800"
          >
            <Printer className="w-4 h-4" />
            Print
          </button>
        </div>
      </div>

      {/* Title & Description */}
      <div className="max-w-5xl mx-auto text-center mb-6 px-2 sm:px-0">
        <h1 className="text-2xl sm:text-3xl font-semibold text-[#0B5150] mb-1">
          {sop.title || "Manual"}
        </h1>
        <p className="text-xs sm:text-sm text-slate-500 dark:text-slate-400">
          Category: {sop.category || "Manual"}
        </p>
        {sop.description && (
          <p className="mt-4 text-base sm:text-lg text-slate-700 dark:text-slate-300 leading-relaxed text-justify border-y border-slate-300 dark:border-zinc-700 py-3 px-2 sm:px-0">
            {sop.description}
          </p>
        )}
      </div>

      {/* Steps */}
      <div className="max-w-5xl mx-auto space-y-6 sm:space-y-8">
        {steps.length > 0 ? (
          steps.map((step, i) => (
            <div
              key={step?.id ?? `step-${i}`}
              className="rounded-2xl border border-zinc-200 dark:border-zinc-800 bg-zinc-50 dark:bg-[#0b0b0b] p-4 sm:p-5"
            >
              <h3 className="text-lg sm:text-xl font-semibold text-[#0B5150] mb-3">
                Step {i + 1}
              </h3>

              <p className="text-sm sm:text-base text-slate-800 dark:text-slate-200 mb-4 leading-relaxed break-words">
                {step?.text || "—"}
              </p>

              {step?.image_url && (
                <div className="flex justify-center">
                  <img
                    src={step.image_url}
                    alt={`Step ${i + 1}`}
                    onClick={() => setZoomImage(step.image_url)}
                    className="cursor-zoom-in rounded-lg object-contain w-full max-w-full sm:max-w-[800px] max-h-[60vh] select-none"
                    draggable={false}
                  />
                </div>
              )}
            </div>
          ))
        ) : (
          <p className="text-slate-500 dark:text-slate-400 italic text-center">
            No steps available.
          </p>
        )}
      </div>

      {/* Zoom Modal */}
      {zoomImage && (
        <div
          onClick={() => setZoomImage(null)}
          className="fixed inset-0 bg-black/80 z-50 flex items-center justify-center p-2 sm:p-4 cursor-zoom-out"
        >
          <img
            src={zoomImage}
            alt="Zoomed"
            className="max-w-[95vw] max-h-[90vh] rounded-xl shadow-2xl object-contain"
          />
        </div>
      )}
    </div>
  );
}
